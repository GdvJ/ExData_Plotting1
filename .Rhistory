} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("TX", "heart failure")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
best("SC", "heart attack")
best("MD", "heart attack")
best("TX", "heart failure")
best("TX", "heart attack")
best("SC", "heart attack")
best("TX", "heart attack")
submit()
best("SC" , "heart attack")
submit(manual=TRUE)
clear
clear()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
c
?c
z
C(z,555,z)
library(httr)
oauth_endpoints("github")
myapp ", secret = "")
github_token  req  stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
download.file(fileUrl, destfile="./pid.csv")
library(sqldf)
acs <- read.csv("./pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
clear
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./pid.csv")
library(sqldf)
acs <- read.csv("./pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("sqldf")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./pid.csv")
library(sqldf)
acs <- read.csv("./pid.csv", header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(jpeg)
library(Rcpp)
library(plyr)
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="Q1Q3.csv")
data<-read.csv("Q1Q3.csv", header=TRUE)
data1<-data[which(data$ACR==3 & data$AGS==6),]
head(data1)
file.url <- 'http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
download.file(file.url, destfile="pic.jpeg", mode='wb' )
install.packages("jpeg")
library(jpeg)
picture<-readJPEG("pic.jpeg", native=TRUE)
quantile(picture,props = c(0.3,0.8))
file.url <-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(file.url, destfile="gdp.csv")
file.url1 <-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(file.url1, destfile="edu.csv")
gdp<-read.csv("gdp.csv",header=T, skip = 4, sep=",", dec=",",colClasses="character")
gdp<-gdp[1:190,c(1,4,5)]
gdp<-data.frame(gdp)
makenumeric<-as.numeric(gsub(",","",gdp[,3]))
newgdp<-cbind(gdp,makenumeric)
edu<-read.csv("edu.csv", header=TRUE)
mergedData<-merge(newgdp,edu,by.x="X",by.y="CountryCode")
sortmergedData<-mergedData[order(mergedData[,4],decreasing=FALSE),]
nrow(mergedData)
sortmergedData[13,c(1,5)]
sortmergedData_dec<-mergedData[order(mergedData[,4],decreasing=TRUE),]
nrow(sortmergedData_dec)
rank<-c(1:189)
HI<-cbind(sortmergedData_dec,rank)
HI<-subset(HI, Income.Group=="High income: OECD"|Income.Group=="High income: nonOECD")
Hisub<-HI[,c(1,4,6,35)]
sapply(split(Hisub[,4],Hisub$Income.Group),mean)
quatile<-c(0.2,0.4,0.6,0.8,1)
qsep<-quantile(sortmergedData_dec$makenumeric,quatile)
sep<-sortmergedData_dec$makenumeric
xtabs(sep~sortmergedData$Income.Group)
install.packages("Rcpp")
install.packages("plyr")
library(Rcpp)
library(plyr)
Q5<-sortmergedData_dec[1:38,c(1,4,6)]
count(Q5,"Income.Group")
install.packages("Rcpp")
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
# Create dataset after calculations
calculatedData<- data[, lapply(.SD, mean), by=c("subjectID", "activity")]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
run_analysis <- function(){
# load test data
subject_test = read.table("UCI HAR Dataset/test/subject_test.txt")
X_test = read.table("UCI HAR Dataset/test/X_test.txt")
Y_test = read.table("UCI HAR Dataset/test/Y_test.txt")
# load training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
Y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
# load lookup information
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureId", "featureLabel"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityId", "activityLabel"))
activities$activityLabel <- gsub("_", "", as.character(activities$activityLabel))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureLabel)
# merge test and training data and then name them
subject <- rbind(subject_test, subject_train)
names(subject) <- "subjectId"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureLabel[includedFeatures])
Y <- rbind(Y_test, Y_train)
names(Y) = "activityId"
activity <- merge(Y, activities, by="activityId")$activityLabel
# merge data frames of different columns to form one data table
data <- cbind(subject, X, activity)
write.table(data, "merged_tidy_data.txt")
# create a dataset grouped by subject and activity after applying standard deviation and average calculations
library(data.table)
dataDT <- data.table(data)
calculatedData<- dataDT[, lapply(.SD, mean), by=c("subjectId", "activity")]
write.table(calculatedData, "calculated_tidy_data.txt")
}
run_analysis()
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
# Create dataset after calculations
calculatedData<- data[, lapply(.SD, mean)]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
# Create dataset after calculations
calculatedData<- data[, lapply(.SD, mean), by=c("subjectID", "activity")]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
# Create dataset after calculations
calculatedData<- data[, lapply(.SD, mean), by= "subjectID", "activity"]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
type(data)
install.packages("data.table")
library(data.table)
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
library(data.table)
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
datatable <- data.table(data)
# Create dataset after calculations
calculatedData<- datatable[, lapply(.SD, mean), by= "subjectID", "activity"]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
#Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
library(data.table)
# Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
datatable <- data.table(data)
# Create dataset after calculations
calculatedData<- datatable[, lapply(.SD, mean), by= c("subjectID", "activity")]
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
#Necessary packages
library(data.table)
#1. Read info
features <- read.table("UCI HAR Dataset/features.txt", col.names=c("featureID", "featureName"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names=c("activityID", "activityName"))
activities$activityName <- gsub("_", "", as.character(activities$activityName))
includedFeatures <- grep("-mean\\(\\)|-std\\(\\)", features$featureName)
# 2. Read data
#Read training data
subject_train = read.table("UCI HAR Dataset/train/subject_train.txt")
X_train = read.table("UCI HAR Dataset/train/X_train.txt")
y_train = read.table("UCI HAR Dataset/train/Y_train.txt")
#Read test data
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/Y_test.txt")
# 3. Merge test and training set
subjects <- rbind(subject_test, subject_train)
names(subjects) <- "subjectID"
X <- rbind(X_test, X_train)
X <- X[, includedFeatures]
names(X) <- gsub("\\(|\\)", "", features$featureName[includedFeatures])
Y <- rbind(y_test, y_train)
names(Y) = "activityID"
activity <- merge(Y, activities, by="activityID")$activityName
# Merge data frames
data <- cbind(subjects, X, activity)
write.table(data, "final_dataset.txt")
datatable <- data.table(data)
# 4. Create dataset after calculations
calculatedData<- datatable[, lapply(.SD, mean), by= c("subjectID", "activity")]
# 5. Store dataset
write.table(calculatedData, "calculated_dataset.txt",row.names = FALSE)
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data<- subset(data, (data$Date == "1/2/2007" | data$Date== "2/2/2007"))
png("plot1.png", width=480, height=480)
hist(data$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data<- subset(data, (data$Date == "1/2/2007" | data$Date== "2/2/2007"))
GlobalActivePower <- as.numeric(data$Global_active_power)
png("plot1.png", width=480, height=480)
hist(GlobalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data<- subset(data, (data$Date == "1/2/2007" | data$Date== "2/2/2007"))
date <- strptime(paste(data$Date, data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(data$Global_active_power)
png("plot2.png", width=480, height=480)
plot(date, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
date <- strptime(paste(data$Date, data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(data$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(date, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(date, subMetering2, type="l", col="red")
lines(date, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
date <- strptime(paste(data$Date, data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(data$Global_active_power)
subMetering1 <- as.numeric(data$Sub_metering_1)
subMetering2 <- as.numeric(data$Sub_metering_2)
subMetering3 <- as.numeric(data$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(date, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(date, subMetering2, type="l", col="red")
lines(date, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
setwd( "C:/Users/Jvandegevel/Documents/Coursera/Exploratory Data Analysis")
data <- read.table("household_power_consumption.txt",sep =";", header = TRUE, stringsAsFactors=FALSE)
data <- subset(data, (data$Date == "1/2/2007" | data$Date== "2/2/2007"))
date <- strptime(paste(data$Date, data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(data$Global_active_power)
globalReactivePower <- as.numeric(data$Global_reactive_power)
voltage <- as.numeric(data$Voltage)
subMetering1 <- as.numeric(data$Sub_metering_1)
subMetering2 <- as.numeric(data$Sub_metering_2)
subMetering3 <- as.numeric(data$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(date, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(date, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(date, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(date, subMetering2, type="l", col="red")
lines(date, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(date, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
